/*
 Задача 64: Задайте значения N. Напишите программу, которая выведет все натуральные числа в промежутке от N до 1.
 N = 5. -> "5, 4, 3, 2, 1"
 N = 8. -> "8, 7, 6, 5, 4, 3, 2, 1"
 */
 
Консоль.Write("Введите число: ");
Преобразовать = число  int.ToInt32(консоль.Строка чтения());
1  =  количество  int;
NaturalToLow(количество, количество);


NaturalToLow void(int n, int count)
{
    если (количество > n)
    {
        Возврат;
    }
    ещё
    {
        NaturalToLow(n, количество  + 1);
        Консоль.Запись (количество + " ");
    }
}

 /*
 Задача 66: Задайте значения M и N. Напишите программу, которая найдёт сумму натуральных элементов в промежутке от M до N.
 M = 1; N = 15 -> 120
 M = 4; N = 8. -> 30
 */
 
Консоль.Write("Введите число M: ");
Преобразовать = m  int.ToInt32(консоль.Строка чтения());

Консоль.Write("Введите число N: ");
Преобразовать = n  целых чисел.ToInt32(консоль.Строка чтения());

Сумма фроммтонов (m, n);

// вызов функции "сумма чисел от M до N"
Сумма  нулей (int  m, int  n)
{
    Консоль.Записать(суммировать(m - 1, n));
}

// функция сумма чисел от M до N
Суммировать  int(int  m, int  n)
{
    m =  res  int;
    если (m == n)
        0  возврат;
    ещё
    {
        ++м;
        Сумма  + m = res(m, n);
        возврат  возврата;
    }
}

 /*
 Задача 68: Напишите программу вычисления функции Аккермана с помощью рекурсии. Даны два неотрицательных числа m и n.
 m = 2, n = 3 -> A(m, n) = 9
 m = 3, n = 2 -> A(m, n) = 29
 */
 
Консоль.Write("Введите число M: ");
Преобразовать = m  int.ToInt32(консоль.Строка чтения());

Консоль.Write("Введите число N: ");
Преобразовать = n  целых чисел.ToInt32(консоль.Строка чтения());

Функция Аккермана(m, n);


// вызов функции Аккермана
Аккерманфункция  недействительна(int  m, int  n)
{
    Консоль.Написать(Аккерман (m, n)); 
}

// функция Аккермана
Аккерман  int(int  m, int  n)
{
    если (m == 0)
    {
        возврат 1 + n ;
    }
    если  иначе (n == 0 && m > 0)
    {
        Возвращение Аккермана  (м - 1, 1);
    }
    ещё
    {
        возвращение (Аккерман(м - 1, Аккерман(м, n - 1)));
    }
}
